group 'grammars'
version '0.3.1'

apply plugin: 'java'

sourceCompatibility = 10
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.+'
    }
}



apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'antlr'

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.+'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.+'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.+'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.+' // parameterized tests
    testCompile 'org.jmockit:jmockit:1.38'
    testCompile 'org.assertj:assertj-core:3.+'
    testCompile 'net.java.quickcheck:quickcheck:0.+'

    testCompileOnly 'org.apiguardian:apiguardian-api:1.+'
}



junitPlatformTest {
    jvmArgs "-Djdk.attach.allowAttachSelf"
}

test {
    systemProperties 'property': 'value'
}

junitPlatform.enableStandardTestTask true

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.+'
    applyTo junitPlatformTest
}

junitPlatformTest {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}



jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main*'])
        })
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}



// apply plugin: 'coveralls'
// coveralls.jacocoReportPath = './build/reports/jacoco/test/jacocoTestReport.xml'
